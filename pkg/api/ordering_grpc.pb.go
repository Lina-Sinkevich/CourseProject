// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderingClient is the client API for Ordering service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderingClient interface {
	MakeOrder(ctx context.Context, in *OrderInfo, opts ...grpc.CallOption) (*OrderStatus, error)
}

type orderingClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderingClient(cc grpc.ClientConnInterface) OrderingClient {
	return &orderingClient{cc}
}

func (c *orderingClient) MakeOrder(ctx context.Context, in *OrderInfo, opts ...grpc.CallOption) (*OrderStatus, error) {
	out := new(OrderStatus)
	err := c.cc.Invoke(ctx, "/api.Ordering/MakeOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderingServer is the server API for Ordering service.
// All implementations must embed UnimplementedOrderingServer
// for forward compatibility
type OrderingServer interface {
	MakeOrder(context.Context, *OrderInfo) (*OrderStatus, error)
}

// UnimplementedOrderingServer must be embedded to have forward compatible implementations.
type UnimplementedOrderingServer struct {
}

func (UnimplementedOrderingServer) MakeOrder(context.Context, *OrderInfo) (*OrderStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeOrder not implemented")
}

// UnsafeOrderingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderingServer will
// result in compilation errors.
type UnsafeOrderingServer interface {
	mustEmbedUnimplementedOrderingServer()
}

func RegisterOrderingServer(s grpc.ServiceRegistrar, srv OrderingServer) {
	s.RegisterService(&Ordering_ServiceDesc, srv)
}

func _Ordering_MakeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServer).MakeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ordering/MakeOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServer).MakeOrder(ctx, req.(*OrderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Ordering_ServiceDesc is the grpc.ServiceDesc for Ordering service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ordering_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Ordering",
	HandlerType: (*OrderingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeOrder",
			Handler:    _Ordering_MakeOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ordering.proto",
}
